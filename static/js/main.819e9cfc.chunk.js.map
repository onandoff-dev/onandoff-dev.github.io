{"version":3,"sources":["images/logo-bg-white.svg","images/github.svg","images/email.svg","sounds/plunger.mp3","components/LinkWithSound.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","plungerSfx","require","LinkWithSound","children","css","href","useSound","volume","play","stop","a","className","onMouseEnter","onMouseLeave","whileHover","scale","whileTap","App","img","src","logo","alt","rotate","borderRadius","email","github","div","initial","animate","transition","duration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uDCA3CD,EAAOC,QAAU,IAA0B,qC,6ICIvCC,EAAaC,EAAQ,IAEZC,EAAoG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,KAAU,EACjHC,YAASN,EAAY,CAACO,OAAQ,KADmF,mBACjIC,EADiI,KAC1HC,EAD0H,KAC1HA,KAEd,OACI,kBAAC,IAAOC,EAAR,CACIC,UAAWP,EACXC,KAAMA,EACNO,aAAc,WAEVJ,EAAK,KAETK,aAAc,WAEVJ,KAEJK,WAAY,CAACC,MAAO,KACpBC,SAAU,CAACD,MAAO,KAEjBZ,I,KC4BEc,MA5Cf,WACI,OACI,yBAAKN,UAAU,+CACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,qEACX,kBAAC,IAAOO,IAAR,CACIC,IAAKC,IACLT,UAAU,+BACVU,IAAI,OACJP,WAAY,CAACC,MAAO,IAAKO,OAAQ,IACjCN,SAAU,CACND,MAAO,GACPO,QAAS,GACTC,aAAc,UAGtB,yBAAKZ,UAAU,iBACX,kBAAC,EAAD,CAAeP,IAAI,oEAAoEC,KAAK,8BACxF,yBAAKc,IAAKK,IAAOb,UAAU,iBAAiBU,IAAI,WAEpD,kBAAC,EAAD,CAAejB,IAAI,oEAAoEC,KAAK,oCACxF,yBAAKc,IAAKM,IAAQd,UAAU,iBAAiBU,IAAI,eAKjE,0BAAMV,UAAU,+DACZ,kBAAC,IAAOe,IAAR,CAAYf,UAAU,6BACVgB,QAAS,CAACZ,MAAO,IACjBa,QAAS,CAACb,MAAO,GACjBc,WAAY,CAACC,SAAU,KAE/B,uBAAGnB,UAAU,6DAAb,gJAKR,4BAAQA,UAAU,2BCjCVoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.819e9cfc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-bg-white.103ed710.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.09ff6db3.svg\";","module.exports = __webpack_public_path__ + \"static/media/email.6edcf499.svg\";","module.exports = __webpack_public_path__ + \"static/media/plunger.778177ed.mp3\";","import React from 'react';\nimport {motion} from \"framer-motion\";\nimport useSound from \"use-sound\";\n\nlet plungerSfx = require('../sounds/plunger.mp3');\n\nexport const LinkWithSound: React.FunctionComponent<{ children: React.ReactNode, css?: string, href: string }> = ({children, css, href}) => {\n    const [play, {stop}] = useSound(plungerSfx, {volume: 0.5});\n    //const [isHovering, setIsHovering] = React.useState(false);\n    return (\n        <motion.a\n            className={css}\n            href={href}\n            onMouseEnter={() => {\n                //setIsHovering(true);\n                play({});\n            }}\n            onMouseLeave={() => {\n                //setIsHovering(false);\n                stop();\n            }}\n            whileHover={{scale: 1.2}}\n            whileTap={{scale: 0.9}}\n        >\n            {children}\n        </motion.a>\n    );\n};\n","import React from 'react';\nimport logo from './images/logo-bg-white.svg';\nimport github from './images/github.svg';\nimport email from './images/email.svg';\nimport {motion} from \"framer-motion\";\nimport {LinkWithSound} from \"./components/LinkWithSound\";\nimport './styles/tailwind.css';\n\nfunction App() {\n    return (\n        <div className=\"mx-auto flex flex-col bg-black min-h-screen\">\n            <nav className=\"bg-black px-4 sm:px-0\">\n                <div className=\"flex flex-row container items-center justify-between mx-auto my-2\">\n                    <motion.img\n                        src={logo}\n                        className=\"h-8 my-4 bg-white rounded-lg\"\n                        alt=\"logo\"\n                        whileHover={{scale: 1.2, rotate: 90}}\n                        whileTap={{\n                            scale: 0.8,\n                            rotate: -90,\n                            borderRadius: \"100%\"\n                        }}\n                    />\n                    <div className=\"flex flex-row\">\n                        <LinkWithSound css=\"ml-2 text-base font-normal font-sans leading-loose tracking-tight\" href=\"mailto:contact@onandoff.io\">\n                            <img src={email} className=\"rounded-sm h-8\" alt=\"email\"/>\n                        </LinkWithSound>\n                        <LinkWithSound css=\"ml-2 text-base font-normal font-sans leading-loose tracking-tight\" href=\"https://github.com/onandoff-dev/\">\n                            <img src={github} className=\"rounded-sm h-8\" alt=\"github\"/>\n                        </LinkWithSound>\n                    </div>\n                </div>\n            </nav>\n            <main className=\"flex container items-center justify-start flex-grow mx-auto\">\n                <motion.div className=\"flex flex-col px-4 sm:px-0\"\n                            initial={{scale: 0.5}}\n                            animate={{scale: 1}}\n                            transition={{duration: 0.5}}\n                >\n                    <p className=\"text-white font-medium text-2xl leading-relaxed max-w-2xl\">We are Software\n                        Engineers based in Munich specialising in app\n                        development, web development, ux design and deployment across all platforms.</p>\n                </motion.div>\n            </main>\n            <footer className=\"flex flex-row w-full\">\n\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}